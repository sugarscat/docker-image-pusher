name: Docker 🐳✨

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull & Push 🚀
    runs-on: ubuntu-latest

    steps:
    - name: Check Disk Before Cleanup 📦
      run: |
        echo "🧹 Before cleaning up..."
        df -hT

    - name: Maximize Disk Space 📈
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: true
        remove-haskell: true
        build-mount-path: '/var/lib/docker/'

    - name: Restart Docker 🔄
      run: sudo service docker restart

    - name: Check Disk After Cleanup 📦✅
      run: |
        echo "✨ Cleanup done!"
        df -hT

    - name: Checkout Code 🛒
      uses: actions/checkout@v4

    - name: Setup Docker Buildx 🔧
      uses: docker/setup-buildx-action@v3

    - name: Pull, Tag, Push Images 📦➡️🛳️
      run: |
        echo "🔑 Login to Aliyun Registry..."
        docker login -u "$ALIYUN_REGISTRY_USER" -p "$ALIYUN_REGISTRY_PASSWORD" "$ALIYUN_REGISTRY"

        declare -A duplicate_images temp_map

        echo "📝 Analyzing images..."
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^# ]] && continue
          alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
          image=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | xargs | awk '{print $NF}')
          image="${image%%@*}"
          image_name=$(basename "$image" | cut -d':' -f1)
          name_space=$(echo "$image" | awk -F'/' '{print (NF==3 ? $2 : (NF==2 ? $1 : ""))}')
          [ -n "${temp_map[$image_name]}" ] && [ "${temp_map[$image_name]}" != "${name_space}_" ] && duplicate_images["$image_name"]=true
          temp_map["$image_name"]="${name_space}_"
        done < images.txt

        echo "🚀 Start processing images..."
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^# ]] && continue
          alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
          platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
          platform_prefix=${platform//\//_}_
          [ -z "$platform" ] && platform_prefix=""

          image=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | xargs | awk '{print $NF}')
          image="${image%%@*}"
          image_name_tag=$(basename "$image")
          image_name=$(echo "$image_name_tag" | cut -d':' -f1)
          image_tag=$(echo "$image_name_tag" | cut -d':' -f2)
          [ -z "$image_tag" ] && image_tag="latest"

          name_space=$(echo "$image" | awk -F'/' '{print (NF==3 ? $2 : (NF==2 ? $1 : ""))}')
          name_space_prefix=""
          [ -n "${duplicate_images[$image_name]}" ] && [ -n "$name_space" ] && name_space_prefix="${name_space}_"

          [ -n "$alias" ] && image_name_tag="${alias}:${image_tag}"

          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"

          echo "🐳 Pulling $image..."
          docker pull "$image"

          echo "🔗 Tagging as $new_image..."
          docker tag "$image" "$new_image"

          echo "📤 Pushing $new_image..."
          docker push "$new_image"

          echo "🧹 Cleaning up local images..."
          docker rmi "$image" "$new_image"

          echo "🛢️ Disk usage after cleanup:"
          df -hT
          echo "=============================================================================="
        done < images.txt
